#!/bin/bash

set -eu

BUILD_DEBUG="${BUILD_DEBUG:-}"
if [[ -n "${BUILD_DEBUG}" ]]; then
    set -x
fi

# Initialize empty variables
: ${CI_BRANCH=""}
: ${UPLOAD_LATEST=""}
# Drone will set this on tag
: ${CI_BUILD_TAG="${DRONE_TAG:-}"}

# cd to app root
CWD=$(dirname $0)
if [[ `basename $(pwd)` = 'scripts' ]]; then
  cd ../
else
  cd `dirname $CWD`
fi

source ./scripts/utils.sh

# -------------------------------------

function printHelp() {
    cat 1>&2 <<EOF
build-static Usage:
  -d - Build debug instead of production build
  -f - Force: Turn off checks that prevent you from doing bad things
  -l - Build as "latest-2.3" instead of the version in package.json
  -t - Tag and push tag
  -u - Upload to GCE
  -s - Skip tests
  -c=CDN - Force a CDN path for static asset delivery. Default <releases.rancher.com/ui>
  -v=VERSION - Force version to be VERSION instead of what is in package.json
  -p=PROJECT_NAME - name of the Google Cloud project hosting the storage bucket
EOF
  exit 1;
}

# -------------------------------------

# Parse options
BRANCH=$CI_BRANCH
BUILD_TAG="${CI_BUILD_TAG#v}"
CDN="releases.rancher.com/ui"

# Parse branch argument and set to current branch name if empty
if [[ -z "$BRANCH" ]]; then
  BRANCH=$(git symbolic-ref HEAD | sed -e "s/^refs\/heads\///")
fi

if [[ -z "$BUILD_TAG" ]]; then
  PKG_VERSION=$(cat package.json | grep version | head -n 1 | cut -f4 -d'"')
else
  PKG_VERSION="$BUILD_TAG"
fi

FORCE=0
LATEST=0
MODE=""
UPLOAD=0
TAG=0
TEST=1
ENVIRONMENT="production"
FINGERPRINT="yes"
: ${FORCE_VERSION:=""}
GS_PROJECT_NAME="${GS_PROJECT_NAME:-Rancher}"

while getopts ":dlustfv:c:p:m:" opt;do
    case $opt in
    d)
        ENVIRONMENT="development"
        ;;
    f)
        FORCE=1
        ;;
    l)
        LATEST=1
        ;;
    m)
        MODE=$OPTARG
        ;;
    s)
        TEST=0
        ;;
    t)
        TAG=1
        ;;
    u)
        UPLOAD=1
        ;;
    v)
        FORCE_VERSION=$OPTARG
        ;;
    c)
        CDN=$OPTARG
        ;;
    p)
        GS_PROJECT_NAME=$OPTARG
        ;;
    \?)
        echo "Invalid arguemnt: ${OPTARG}"
        printHelp
        exit 1
        ;;
    :)
        echo "Option -${OPTARG} requires an argument." >&2
        printHelp
        exit 1
        ;;
    esac
done

# UPLOAD_LATEST=true is set by Drone for auto upload to CDN
if [[ "${BRANCH}" == "2.3-fixes" ]] && [[ "${UPLOAD_LATEST}" == "true" ]]; then
  UPLOAD=2
  LATEST=1
fi

# Sanity checking
if [[ $LATEST -eq 1 ]] && [[ $TAG -eq 1 ]]; then
  echo "You can't tag latest."
fi

if ( [[ $TAG -eq 1 ]] || [[ $UPLOAD -ne 0 ]] ) && [[ "${BRANCH}" != "2.3-fixes" ]]; then
  echo "You can only tag or upload the 2.3-fixes branch (you are on '${BRANCH}')."
fi

REMOTE=$(git config --get remote.origin.url)
if [[ $TAG -eq 1 ]] && [[ ! "${REMOTE}" =~ .*rancher/ui.* ]]; then
  echo "You can only tag when origin is the main rancher/ui repo (you are on '${REMOTE}')."
fi

if [[ "${FORCE_VERSION}" != "" ]]; then
  VERSION=${FORCE_VERSION}
else
  if [[ $LATEST -eq 1 ]]; then
    VERSION="2.3-fixes"
  else
    VERSION=${PKG_VERSION}
  fi
fi

if [[ $LATEST -eq 1 ]]; then
  FINGERPRINT="no"
fi

EXISTING=$(git tag -l "v${VERSION}")
if [[ $TAG -eq 1 ]] && [[ "${EXISTING}" = "v${VERSION}" ]]; then
  echo "There is already an existing tag v${VERSION}"
fi

BUILD_PAR="dist/static"
BUILD_DIR="${BUILD_PAR}/${VERSION}"
BUILD_TGZ="${BUILD_PAR}/${VERSION}.tar.gz"
GS_URL="${GS_URL:-gs://${CDN}}"

echo "Building Static Tarball..."
UI_MODE="${MODE}" RANCHER="" CATALOG="" runCmd node --max_old_space_size=4096 ./node_modules/.bin/ember build --environment=${ENVIRONMENT} --output-path=${BUILD_DIR}

# Create a file containing the version
echo "${PKG_VERSION}" > ${BUILD_DIR}/VERSION.txt

# Remove .DS_Store files
runCmd find ${BUILD_DIR} -name '.DS_Store' -exec rm {} \;

# Create a tarball of the version
runCmd tar -czf ${BUILD_TGZ} -C ${BUILD_PAR} ${VERSION}

# Upload asset, either from laptop or from CI pipeline
echo "Done build"